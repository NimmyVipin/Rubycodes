        Blocks
*********************

Blocks are very prevalent in Ruby, we can think of them as little anonymous functions that can be passed into methods.

Blocks are enclosed in a do / end statement or between brackets {}, and they can have multiple arguments.

A method work with a block, and  to know if a block is available ,  need to use the yield keyword. 

When we use yield, the code inside the block will be executed.

	
def print_once
  yield
end
 
print_once { puts "Block is being run" }

Yield can be used multiple times, which will result in the block being executed as many times as  call yield.

It is also possible to use yield with any number of arguments. These arguments can then be used by the block.

def one_two_three
  yield 1
  yield 2
  yield 3
end
 
one_two_three { |number| puts number * 10 }
# 10, 20, 30

If  try to yield without a block it will be a no block given (yield) error. 

check if a block has been passed in with the block_given? method.
	
def do_something_with_block
  return "No block given" unless block_given?
  yield
end


                   procs
***************************************

Proc objects are blocks of code that have been bound to a set of local variables.

The class Proc has a method call that invokes the block.

If we want to pass TWO blocks to a function, or to save  block to a variable so that can use it again later, that's a job for Procs, or Procedures! Actually, a block is a Proc (which is the class name for a block) .


                   lambdas
****************************************


    A lambda gives  more flexibility with what it returns (like if  want to return multiple values at once) because we can safely use the explicit return statement inside of one. With lambdas, return will only return from the lambda itself and not the enclosing method, which is what happens if we use return inside a block or Proc.
    Lambdas are also much stricter than Procs about  passing them the correct number of arguments (we'll get an error if  pass the wrong number).





Blocks are unnamed little code chunks we can drop into other methods. Used all the time.
Procs are identical to blocks but  can store them in variables, which lets to pass them into functions as explicit arguments
and save them for later. Used explicitly sometimes.
Lambdas are really full methods that just haven't been named. Used rarely.

